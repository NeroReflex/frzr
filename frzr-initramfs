#! /bin/bash

if [ $EUID -ne 0 ]; then
    echo "$(basename $0) must be run as root"
    exit 1
fi

RUNNING=true
STATE="BEGIN"

while $RUNNING; do
    case "$STATE" in
    "BEGIN")
        # Check whether this is an install, upgrade, or manual run
        if [ $UPGRADE -eq 1 ]; then
            echo "Doing an upgrade"
            STATE="UPGRADE"
        elif [ $UPGRADE -eq 0 ]; then
            echo "Doing a first time install"
            STATE="INSTALL"
        elif [ -d /frzr_root ]; then
            echo "Running frzr-initramfs manually"
            STATE="MANUAL"
        else
            echo "We failed our checks. FAIL!"
            STATE="FAIL"
        fi
        ;;
    "INSTALL")
        # We are doing a fresh new install
        echo "We are doing an rebuild within an installer"
        cd ${SUBVOL}
        COMMAND=$(
            cat <<'EOF'
echo '
ALL_config="/etc/mkinitcpio.conf"
ALL_kver="/boot/vmlinuz-linux"
ALL_microcode=(/boot/*-ucode.img)

PRESETS="default"

default_image="/boot/initramfs-linux.img"
' > /etc/mkinitcpio.d/${NAME%%-*}.preset

mkinitcpio -p ${NAME%%-*}
EOF
        )
        # Set R/W permissions
        btrfs_subvolume_set_rw ${SUBVOL}
        echo "Entering chroot at ${SUBVOL}"
        frzr_chroot $SUBVOL $COMMAND
        # Set back to R/O permissions
        btrfs_subvolume_set_ro ${SUBVOL}
        echo "Exiting chroot at ${SUBVOL}"
        frzr_undo_chroot ${SUBVOL}
        STATE="SUCCESS"
        ;;
    "UPGRADE")
        # We are doing an upgrade to an existing system
        echo "We're doing an upgrade operation"
        ### Grabbing name of the currently deployed system
        ID=$(grep '^ID=' "$SUBVOL/etc/os-release" | awk -F= '{ print $2 }' | sed 's/"//g')
        VERSIONID=$(grep '^VERSION_ID=' "$SUBVOL/etc/os-release" | awk -F= '{ print $2 }' | sed 's/"//g')
        BUILDID=$(grep '^BUILD_ID=' "$SUBVOL/etc/os-release" | awk -F= '{ print $2 }' | sed 's/"//g')

        BUILD="$ID"-"$VERSIONID"_"$BUILDID"
        DEPLOYMENT_PATH="/frzr_root/deployments/$BUILD"

        # Get locked state
        RELOCK=0
        LOCK_STATE=$(btrfs property get -fts "$DEPLOYMENT_PATH")
        if [[ $LOCK_STATE == *"ro=true"* ]]; then
            btrfs_subvolume_set_rw ${DEPLOYMENT_PATH}
            RELOCK=1
        else
            echo "Filesystem appears to be unlocked"
        fi

        echo "Generating configuration for $BUILD"

        ### Rebuild Initramfs with custom preset
        cd ${SUBVOL}
        COMMAND=$(
            cat <<'EOF'
echo '
ALL_config="/etc/mkinitcpio.conf"
ALL_kver="/boot/vmlinuz-linux"
ALL_microcode=(/boot/*-ucode.img)

PRESETS="default"

default_image="/boot/initramfs-linux.img"
' > /etc/mkinitcpio.d/\${NAME%%-*}.preset

mkinitcpio -p \${NAME%%-*}
EOF
        )
        # Set R/W permissions
        btrfs_subvolume_set_rw ${SUBVOL}
        echo "Entering chroot at ${SUBVOL}"
        frzr_chroot $SUBVOL $COMMAND
        # Set back to R/O permissions
        btrfs_subvolume_set_ro ${SUBVOL}
        echo "Exiting chroot at ${SUBVOL}"
        frzr_undo_chroot ${SUBVOL}

        STATE="CLEANUP"
        ;;
    "MANUAL")
        echo "Looks like were not doing an install or upgrade. Rebuilding local initramfs"
        # If frzr is not running and the user is triggering a rebuild manually
        ### Grabbing name of the currently deployed system
        ID=$(grep '^ID=' /etc/os-release | awk -F= '{ print $2 }' | sed 's/"//g')
        VERSIONID=$(grep '^VERSION_ID=' /etc/os-release | awk -F= '{ print $2 }' | sed 's/"//g')
        BUILDID=$(grep '^BUILD_ID=' /etc/os-release | awk -F= '{ print $2 }' | sed 's/"//g')

        BUILD="$ID"-"$VERSIONID"_"$BUILDID"
        DEPLOYMENT_PATH="/frzr_root/deployments/$BUILD"

        # Get locked state
        RELOCK=0
        LOCK_STATE=$(btrfs property get -fts "$DEPLOYMENT_PATH")
        if [[ $LOCK_STATE == *"ro=true"* ]]; then
            btrfs_subvolume_set_rw ${DEPLOYMENT_PATH}
            RELOCK=1
        else
            echo "Filesystem appears to be unlocked"
        fi
        echo '
ALL_config="/etc/mkinitcpio.conf"
ALL_kver="/boot/'$BUILD'/vmlinuz-linux"
ALL_microcode=(/boot/'$BUILD'/*-ucode.img)

PRESETS="default"

default_image="/boot/'$BUILD'/initramfs-linux.img"
' >/etc/mkinitcpio.d/$ID.preset
        # If we are not doing a deployment then this will be used for local installs to rebuild initramfs
        mkinitcpio -p $ID
        STATE="CLEANUP"
        ;;
    "CLEANUP")
        if [[ $RELOCK == 1 ]]; then
            btrfs_subvolume_set_ro ${SUBVOL}
        else
            # Move rebuilt images to the unlocked location if system was unlocked prior
            cp /boot/$BUILD/* /boot
        fi
        STATE="SUCCESS"
        ;;
    "SUCCESS")
        echo "The initramfs rebuild was successful"
        RUNNING=false
        ;;
    "FAIL")
        echo "There were errors while attempting to rebuild the initramfs"
        RUNNING=false
        ;;
    *)
        echo "Something went terribly wrong"
        RUNNING=false
        ;;
    esac
done
