#! /bin/bash

set -e

# import methods
#source "${BASH_SOURCE%/*}/__frzr" "$@"

kernel() {
	local KERNEL_NAME=""

	RUNNING=true
	STATE="BEGIN"
	while $RUNNING; do
		case "$STATE" in
		"BEGIN")
			MOUNT_PATH="/frzr_root"

			# Make sure the frzr_root is mounted during the deployment procedure
			# this code is based on the fact that when a btrfs filesystem is created
			# the default subvolid that is created contextually has the ID set to 256
			# also as a matter of fact in btrfs is impossible to change subvolumes IDs
			if mount | grep -Fqx "${MOUNT_PATH}"; then
				local MOUNTED_MOUNT_PATH="no"
			else
				MOUNT_PATH="/tmp/frzr_root"
				#TASK_MSG="Preparing '${MOUNT_PATH}' to be used as the main subvolume mount path"
				mkdir -p "${MOUNT_PATH}"
				if mount -L frzr_root -t btrfs -o subvolid=5,rw "${MOUNT_PATH}"; then
					local MOUNTED_MOUNT_PATH="yes"
				else
					echo "frzr-kernel failed: could not mount frzr_root"
					STATE="FAIL"
					continue
				fi
				sleep 5
			fi

			# Make sure the EFI partition is mounted during the deployment procedure
			EFI_MOUNT_PATH="${MOUNT_PATH}/efi"

			if mount | grep -Fqx "${EFI_MOUNT_PATH}"; then
				local MOUNTED_EFI_MOUNT_PATH="no"
			else
				mkdir -p "${EFI_MOUNT_PATH}"
				if mount -L frzr_efi "${EFI_MOUNT_PATH}"; then
					local MOUNTED_EFI_MOUNT_PATH="yes"
				else
					TASK_ERROR=1
					TASK_ERROR_MSG="Could not bind ${EFI_MOUNT_PATH} to frzr_efi (boot) partition"
					STATE="FAIL"
					continue
				fi
				sleep 5
			fi

			if [ -d "${MOUNT_PATH}/kernels/usr" ]; then
				MODULES_DIR="${MOUNT_PATH}/kernels"
				KERNEL_OVERLAY_DIR="${MOUNT_PATH}/kernels"
			else
				TASK_ERROR=1
				TASK_ERROR_MSG="Could not find kernels overlay in '${MOUNT_PATH}/kernels/usr'"
				STATE="FAIL"
				continue
			fi

			STATE="DOWNLOAD"
			;;

		"DOWNLOAD")
			if [ -f ".config" ]; then
				TASK_ERROR=1
				TASK_ERROR_MSG="Could not find kernel configuration"
				STATE="FAIL"
				continue
			fi
			
			STATE="BUILD"
			;;
		
		"BUILD")
			# Fetch the name of the kernel (uname -r)
			KERNEL_NAME=$(make -s kernelrelease)

			echo "Checking for pre-installed kernel"
			if [ -d "/usr/lib/modules/${KERNEL_NAME}" ]; then
				
			fi

			echo "Building ${KERNEL_NAME}..."

			# TODO: multicore?
			if ! make all; then
				TASK_ERROR=1
				TASK_ERROR_MSG="ERROR: Compilation of linux-${KERNEL_NAME} failed"
				STATE="FAIL"
				continue
			fi

			STATE="INSTALL"
			;;
		"INSTALL")
			KERNELRELEASE="${KERNEL_NAME}"
			
			# Install kernel modules
			local modulesdir="${KERNEL_OVERLAY_DIR}/usr/modules/${KERNEL_NAME}"
			mkdir -p "${modulesdir}"

			# systemd expects to find the kernel here to allow hibernation
			# https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
			install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

			# Used by mkinitcpio to name the kernel
			echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

			# Install modules suppressing depmod
			ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="${KERNEL_OVERLAY_DIR}/usr" INSTALL_MOD_STRIP=1 DEPMOD=/doesnt/exist modules_install

			# remove build links
			rm "$modulesdir"/build

			# TODO: install headers too

			STATE="INITRAMFS"
			;;
		"INITRAMFS")
			# Generate the initramfs
			if [ -d "/usr/lib/modules/${KERNEL_NAME}" ]; then
				if ! mkinitcpio -c "${BASH_SOURCE%/*}/mkinitcpio.conf" -g "${EFI_MOUNT_PATH}/initramfs-frzr.img" -k "${KERNEL_NAME}" -r "${MODULES_DIR}"; then
					STATE="FAIL"
				fi
			else
				TASK_ERROR=1
				TASK_ERROR_MSG="ERROR: The new kernel has not been installed"
				STATE="FAIL"
				continue
			fi

			STATE="BOOTLOADER"
			;;
		"BOOTLOADER")
			# TODO: write "${EFI_MOUNT_PATH}/loader/entries/frzr_kernel.conf"
			STATE="SUCCESS"
			;;
		"SUCCESS")
			# This state should only be used if the unlock completed without errors
			#TASK_STATE="SUCCESS"

			echo "frzr kernel deployment succeeded"

			RUNNING=false
			;;
		"FAIL")
			# This state should only be used if the unlock failed

			#TASK_STATE="FAIL"

			echo "ERROR: frzr-kernel failed: ${TASK_ERROR_MSG}"

			RUNNING=false
			;;
		*)
			TASK_STATE="UNKNOWN_ERROR"
			echo "ERROR: Something went terribly wrong in $(basename $0)"
			RUNNING=false
			;;
		esac
	done

	# umount the efi path
	if [ "${MOUNTED_EFI_MOUNT_PATH}" = "yes" ]; then
		if mountpoint -q "${EFI_MOUNT_PATH}"; then
			umount -l "${EFI_MOUNT_PATH}"
		fi
	fi

	# umount the frzr_root subvolume (if it was mounted by this tool and not externally)
	if [ "${MOUNTED_MOUNT_PATH}" = "yes" ]; then
		if mountpoint -q "${MOUNT_PATH}"; then
			umount -l "${MOUNT_PATH}"
		fi
	fi
}
