#! /bin/bash

set -e

# Perform the repair install
# $1 target (physical) disk
# $2 frzr_root main subvolume mount path (the one that contains the home subvolume)
repair_install() {
	local disk=${1}
	local frzr_root=${2}

	mkdir -p ${frzr_root}
	local install_mount=$(fdisk -o Device --list ${disk} | grep "^${disk}.*2$")
	local boot_efi=$(fdisk -o Device --list ${disk} | grep "^${disk}.*1$")
	mount ${install_mount} ${frzr_root}
	mount -t vfat ${boot_efi} ${frzr_root}/boot/
	rm -rf ${frzr_root}/boot/*
	bootctl --esp-path=${frzr_root}/boot/ install

	echo "deleting subvolume..."
	btrfs subvolume delete ${frzr_root}/deployments/* || true

	rm -rf ${frzr_root}/etc/*
}

# Perform the fresh install
# $1 target (physical) disk
# $2 frzr_root main subvolume mount path (the one that contains the home subvolume)
fresh_install() {
	local disk=${1}
	local frzr_root=${2}

	mkdir -p ${frzr_root}

	# create partition table and create and mount the btrfs filesystem
	parted --script ${disk} \
	mklabel gpt \
	mkpart primary fat32 1MiB 512MiB \
	set 1 esp on \
	mkpart primary 512MiB 100%

	local part1=$(fdisk -o Device --list ${disk} | grep "^${disk}.*1$")
	local part2=$(fdisk -o Device --list ${disk} | grep "^${disk}.*2$")

	mkfs.btrfs -L frzr_root -f ${part2}

	# TODO: set the GPT type of the partition as Linux x86_64 sysroot the default does not represents the actual content of the partition
	# TODO: the correct partition type is "Linux root (x86-64)" (4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709)
	# TODO: that is very important as it greatly simplify my work to allow easy kernel swaps and will reduce the complexity of the boot

	mount -t btrfs -o nodatacow ${part2} ${frzr_root}

	btrfs subvolume create ${frzr_root}/var
	btrfs subvolume create ${frzr_root}/home

	mkdir -p ${frzr_root}/home/${USERNAME}
	chown 1000:1000 ${frzr_root}/home/${USERNAME}

	mkdir ${frzr_root}/boot
	mkdir -p ${frzr_root}/etc
	mkdir -p ${frzr_root}/.etc

	# setup boot partition & install bootloader
	mkfs.vfat ${part1}
	dosfslabel ${part1} frzr_efi
	mount -t vfat ${part1} ${frzr_root}/boot/
	bootctl --esp-path=${frzr_root}/boot/ install
	parted ${disk} set 1 boot on
}

if [ $EUID -ne 0 ]; then
	echo "$(basename $0) must be run as root"
	exit 1
fi

MOUNT_PATH=/tmp/frzr_root

device_list=()
device_output=`lsblk --list -n -o name,model,size,type | grep disk | tr -s ' ' '\t'`

while read -r line; do
	name=/dev/`echo "$line" | cut -f 1`
	model=`echo "$line" | cut -f 2`
	size=`echo "$line" | cut -f 3`
	device_list+=($name)
	device_list+=("$model ($size)")
done <<< "$device_output"

DISK=$(whiptail --nocancel --menu "Choose a disk to install to:" 20 50 5 "${device_list[@]}" 3>&1 1>&2 2>&3)

# Checking for existing installation

REPAIR=false

if (lsblk -o label ${DISK} | grep -q frzr_efi); then
    echo "Existing installation found"

    if (whiptail --yesno --yes-button "Repair" --no-button "Clean" "WARNING: $DISK appears to already have a system installed. Would you like to repair it or do a clean install?\n\nNOTE: A clean install will delete everything on the disk, but a repair install will preserve your user data." 13 70); then
        echo "User chose to do a repair install"
        REPAIR=true
    else
        echo "User chose to do a clean install"
    fi
else
    echo "Existing installation not found"
fi





if [ "${REPAIR}" == true ]; then ########## Doing a repair install
	repair_install "${DISK}" "${MOUNT_PATH}"
else ########## Doing a fresh install
	if ! (whiptail --yesno "WARNING: $DISK will now be formatted. All data on the disk will be lost. Do you wish to proceed?" 10 50); then
		echo "installation aborted"
		exit 1
	fi

	USERNAME=user

	if [ ! -z $1 ]; then
		USERNAME=$1
	fi

	fresh_install "${DISK}" "${MOUNT_PATH}"
fi



