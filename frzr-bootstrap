#! /bin/bash

set -e

# Perform the repair install
# $1 target (physical) disk
# $2 frzr_root main subvolume mount path (the one that contains the home subvolume)
repair_install() {
	local disk=${1}
	local frzr_root=${2}

	mkdir -p ${frzr_root}
	local install_mount=$(fdisk -o Device --list ${disk} | grep "^${disk}.*2$")
	local boot_efi=$(fdisk -o Device --list ${disk} | grep "^${disk}.*1$")
	mount ${install_mount} ${frzr_root}
	mount -t vfat ${boot_efi} ${frzr_root}/boot/
	rm -rf ${frzr_root}/boot/*
	bootctl --esp-path=${frzr_root}/boot/ install

	echo "deleting subvolume(s)..."
	btrfs subvolume delete ${frzr_root}/deployments/* || true

	rm -rf ${frzr_root}/etc/*
	rm -rf ${frzr_root}/.etc/*
}

# Perform the fresh install
# $1 target (physical) disk
# $2 frzr_root main subvolume mount path (the one that contains the home subvolume)
fresh_install() {
	local disk=${1}
	local frzr_root=${2}

	mkdir -p ${frzr_root}

	if [ ! -z ${SWAP_GIB:-} ]; then
		declare -i SWAP_GIB=1
	fi

	if [ ! -z ${ROOT_GIB:-} ]; then
		declare -i ROOT_GIB=8
	fi

	if [ ! -z ${VAR_GIB:-} ]; then
		declare -i VAR_GIB=4
	fi

	# TODO: the user can set 0 size: handle accordingly. whatever partition gets skipped ends up in the root

	#declare -i ROOT_START=
	declare -i ROOT_END=${ROOT_GIB}
	declare -i SWAP_START=${ROOT_END}
	declare -i SWAP_END=${SWAP_GIB}+${SWAP_START}
	#declare -i VAR_START=${SWAP_END}
	#declare -i VAR_END=${VAR_START}+${VAR_GIB}
	declare -i HOME_START=${SWAP_END}

	# create the GPT partition table and set the correct GPT type for each partition
	parted --script ${disk} \
		mklabel gpt \
		mkpart primary fat32 1MiB 512MiB \
		type 1 "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" \
		set 1 esp on \
		mkpart primary 512MiB ${ROOT_END}.5GiB \
		type 2 "4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709" \
		mkpart primary linux-swap ${SWAP_START}.5 ${SWAP_END}.5GiB \
		type 3 "0657fd6d-a4ab-43c4-84e5-0933c84b4f4f"

	mkpart primary ${HOME_START}.5GiB 100% \
		type 5 "933ac7e1-2eb4-4f13-b844-0e14e2aef915"

	# TODO: put var in a per-deployment subvolume
	# mkpart primary ${VAR_START}.5GiB ${VAR_END}.5GiB \
	# type 4 "4d21b016-b534-45c2-a9fb-5c16e091fd2d" \

	local efi_part=$(fdisk -o Device --list ${disk} | grep "^${disk}.*1$")
	local root_part=$(fdisk -o Device --list ${disk} | grep "^${disk}.*2$")
	local swap_part=$(fdisk -o Device --list ${disk} | grep "^${disk}.*3$")
	#local var_part=$(fdisk -o Device --list ${disk} | grep "^${disk}.*4$")
	local home_part=$(fdisk -o Device --list ${disk} | grep "^${disk}.*4$")

	# this creates the subvolid 5
	mkfs.btrfs -L frzr_root -f ${root_part}
	local root_uuid=$(blkid -s UUID -o value "${root_part}")

	# mount the rootfs so that the install can be performed
	mount ${root_part} ${frzr_root}
	mkdir ${frzr_root}/efi
	mkdir ${frzr_root}/home
	mkdir ${frzr_root}/var

	# TODO: if a minimal/recovery system has to installed in the main partition here is the place to do just that.

	# this creates the subvolid 256
	mkfs.btrfs -L frzr_var -f ${var_part}
	mount ${var_part} ${frzr_root}/var
	local var_uuid=$(blkid -s UUID -o value "${var_part}")

	# setup home partition
	mkfs.btrfs -L frzr_home -f ${home_part}
	mount -t btrfs -o nodatacow ${home_part} ${frzr_root}/home
	local home_uuid=$(blkid -s UUID -o value "${home_part}")

	# create folder for the gamer user
	mkdir -p ${frzr_root}/home/${USERNAME}
	chown 1000:1000 ${frzr_root}/home/${USERNAME}

	# setup the swap partition
	mkswap ${swap_part}
	local swap_uuid=$(blkid -s UUID -o value "${swap_part}")

	# setup boot partition & install bootloader
	mkfs.vfat ${efi_part}
	dosfslabel ${efi_part} frzr_efi
	mount -t vfat ${efi_part} ${frzr_root}/efi/
	bootctl --esp-path=${frzr_root}/efi/ install

	# Write partition UUIDs into a file
	echo "${swap_uuid}" >${frzr_root}/swap_uuid
	echo "${root_uuid}" >${frzr_root}/root_uuid
	echo "${var_uuid}" >${frzr_root}/var_uuid
	echo "${home_uuid}" >${frzr_root}/home_uuid
}

if [ $EUID -ne 0 ]; then
	echo "$(basename $0) must be run as root"
	exit 1
fi

RUNNING=true
STATE="CHECK"

while $RUNNING; do
	case "$STATE" in
	"CHECK")
		echo "Checking for drives connected to the system"
		MOUNT_PATH=/tmp/frzr_root
		device_list=()
		device_output=$(lsblk --list -n -o name,model,size,type | grep disk | tr -s ' ' '\t')
		while read -r line; do
			name=/dev/$(echo "$line" | cut -f 1)
			model=$(echo "$line" | cut -f 2)
			size=$(echo "$line" | cut -f 3)
			device_list+=($name)
			device_list+=("$model ($size)")
		done <<<"$device_output"
		DISK=$(whiptail --nocancel --menu "Choose a disk to install to:" 20 50 5 "${device_list[@]}" 3>&1 1>&2 2>&3)
		echo "Checking for existing FRZR deployments"
		# Checking for existing installation

		if (lsblk -o label ${DISK} | grep -q frzr_efi); then
			echo "Existing installation found"

			if (whiptail --yesno --yes-button "Repair" --no-button "Clean" "WARNING: $DISK appears to already have a system installed. Would you like to repair it or do a clean install?\n\nNOTE: A clean install will delete everything on the disk, but a repair install will preserve your user data." 13 70); then
				echo "User chose to do a repair install"
				STATE="REPAIR"
			else
				echo "User chose to do a clean install"
				STATE="FORMAT"
			fi
		else
			echo "Existing installation not found"
			STATE="FORMAT"
		fi
		;;
	"FORMAT")
		echo "We are doing a fresh install"

		USERNAME=user

		if [ ! -z $1 ]; then
			USERNAME=$1
		fi

		fresh_install "${DISK}" "${MOUNT_PATH}"
		RESULT=$?
		if [ $RESULT -eq 0 ]; then
			STATE="SUCCESS"
		else
			STATE="Fail"
		fi
		;;
	"REPAIR")
		echo "We are doing a repair install"
		repair_install "${DISK}" "${MOUNT_PATH}"
		RESULT=$?
		if [ $RESULT -eq 0 ]; then
			STATE="SUCCESS"
		else
			STATE="Fail"
		fi
		;;
	"SUCCESS")
		echo "Successfully prepared the drive for an FRZR installation"
		RUNNING=false
		;;
	"FAIL")
		echo "The bootstrap failed"
		RUNNING=false
		;;
	*)
		echo "Something went terribly wrong"
		RUNNING=false
		;;
	esac
done
