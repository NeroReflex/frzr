#! /bin/bash

set -Ee
trap frzr_status SIGINT SIGTERM ERR EXIT
set -o pipefail

# Logging variables
JSON_LOG_DIR="/tmp/"

# Each function used should have a tracker variable to go with it to be exported later into a JSON for external tools and utilities to monitor behavior.
# When the function completes without errors these values should be set to 1.
# After completing the function catch the result. EX: RESULT=$? fetch_img_url_func=$RESULT
fetch_img_url_func=0
generate_systemd_boot_cfg_func=0
get_deployment_to_delete_func=0
get_next_boot_deployment_func=0
check_uefi_func=0
execute_migrations_func=0
prepare_efi_partition_func=0

# Check for exported variables provided by an installer script
if [ -z $TARGET ]; then
   TARGET="" # Set to the target deployment channel. This should only be set by the installer script
fi

if [ -z $LOCAL_INSTALL ]; then
   LOCAL_INSTALL=0 # Set to 1 to perform a local media install. This should be set by the installer script
fi

if [ -z $SHOW_UI ]; then
   SHOW_UI=0 # Show the whiptail UI. This is used to show the installation and extraction progress. This should be set only by the installer script.
fi

# Define all public variables to be used here and in all sourced scripts
REPAIR_INSTALL=0 # Set to 1 if you want to do a repair install. This should be set by frzr-bootstrap later if an existing install is found.
NAME="" # Name of the OS to be deployed
MOUNT_PATH="" # This is set as /tmp/frzr_root/ in the installer and /frzr_root during upgrades
SUBVOL=""
DEPLOY_PATH="" # ${MOUNT_PATH}/deployments
FRZR_CHECK_UPDATE=0
FRZR_STEAM_PROGRESS=0
FRZR_SOURCE=""
FRZR_PARAMS=""
FILE_NAME="" # The file name downloaded from the repo
IMG_NAME="" # Path to the downloaded image to be deployed. It gets set by "${MOUNT_PATH}/${FILE_NAME}"
BASE_URL=""
REPO="" # Github repo
CHANNEL="" # The target channel to download the image from. Stable/Testing/Unstable
RELEASES_URL=""
CHECKSUM="" # Expected checksum value of downloaded file
CHECKSUM2="" # Actual checksum of the file downloaded

# If there are any errors at any time during execution of FRZR the frzr_status() function will be ran before exiting.
frzr_status() {
    # Output Function Tracker variables as JSON object
    echo "Generating execution report"
    cat <<EOF
{
    "Functions": {
        "Fetch_Img_Url_Status": "$fetch_img_url_func",
        "generate_systemd_boot_cfg_status": "$generate_systemd_boot_cfg_func",
        "get_next_boot_deployment_status": "$get_next_boot_deployment_func",
        "check_uefi_status": "$check_uefi_func",
        "execute_migrations_status": "$execute_migrations_func",
        "prepare_efi_partition_status": "$execute_migrations_func"
EOF
    # Output public variables as JSON object
    cat <<EOF
    },
    "Variables": {
        "Target": "$TARGET",
        "Local Install": "$LOCAL_INSTALL",
        "Show UI": "$SHOW_UI",
        "Repair Install": "$REPAIR_INSTALL",
        "Name": "$NAME",
        "Mount Path": "$MOUNT_PATH",
        "SUBVOL": "$SUBVOL",
        "Deploy Path": "$DEPLOY_PATH",
        "Frzr Check Update": "$FRZR_CHECK_UPDATE",
        "Frzr Steam Progress": "$FRZR_STEAM_PROGRESS",
        "Frzr Source": "$FRZR_SOURCE",
        "Frzr Params": "$FRZR_PARAMS",
        "File Name": "$FILE_NAME",
        "IMG Name": "$IMG_NAME",
        "Base URL": "$BASE_URL",
        "Repo": "$REPO",
        "Release URL": "$RELEASE_URL",
        "Checksum": "$CHECKSUM",
        "Channel": "$CHANNEL"
    }
}
EOF
}

frzr_check() {
local result=$1
if [ $result == 0 ]; then
   value="✓"
else
   value="✗"
fi

echo $value
}

write_json_log(){
   frzr_status > "$JSON_LOG_DIR/frzr.json"
}


# Begin execution
if [ $EUID -ne 0 ]; then
	echo "$(basename $0) must be run as root"
	exit 1
fi

if [ $# -eq 0  ]; then
    echo "Frzr requires at least one argument. Use frzr help for usage"
    exit
fi

function=$1
arg1=$2
arg2=$3

if [ $function == "help" ]; then
    echo "[Usage]
frzr upgrade [Check for system updates and update the system if available]
frzr set-channel [Set the update channel stable/testing/unstable]
frzr version [Get the current version of the deployed OS]
frzr build-initramfs [Build the initramfs for the kernel]
frzr configure-tweaks [Configure system specific quirks]
frzr bootstrap [Format and configure a drive to be used with FRZR]"
elif [ $function == "bootstrap" ]; then
    echo "bootstrap"
    #source frzr-bootstrap $arg1 # frzr-bootstrap
elif [ $function == "upgrade" ]; then
    # Check if the lock file exists
    if [ -f /tmp/frzr.lock ]; then
        echo "$(basename $0) is already running"
        exit 255
    fi

    # Create the lock file
    touch /tmp/frzr.lock

    # Source the script
    source "${BASH_SOURCE%/*}/__frzr-deploy" "$@"
    RESULT=$?

    # Remove the lock file
    rm -f /tmp/frzr.lock

    exit $RESULT
elif [ $function == "version" ]; then
    echo "version"
elif [ $function == "version" ]; then
    echo "frzr-release"
    #source frzr-release
elif [ $function == "set-channel" ]; then
    echo "set channel"
    #source frzr-channel $arg1
elif [ $function == "get-channel" ]; then
    echo "get-channel"
    #echo ${FRZR_ROOT}/source
elif [ $function == "build-initramfs" ]; then
    echo "frzr-initramfs"
     #source frzr-initramfs
elif [ $function == "configure-tweaks" ]; then
    echo "frzr-tweaks"
     #source frzr-tweaks
else
   echo "invalid argument"
fi





