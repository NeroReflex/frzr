#! /bin/bash

set -Ee

# All global variables are sourced from __frzr-debug
source "${BASH_SOURCE%/*}/__frzr-debug"

# Import methods
source "${BASH_SOURCE%/*}/__frzr" "$@"

# Tracker file directory
TRACKER_FILE_DIR="/tmp/"

# Signals
TASK_STATE=""
TASK_MSG=""         # TASK_MSG will be read by external tools. EX TASK_MSG="Preparing user directory"
TASK_TRACKER=0      # TASK_TRACKER will be used to signal back that the current TASK_MSG in queue is handled or not 0 = Pending 1 = Completed
TASK_ERROR=0        # Signal to let listeners know that the task had an error.
TASK_ERROR_MSG=""   # Error message. EX: "Unexpected I/O errors found during write"
TASK_WARNING=0      # Signal to let listeners know there is a warning
TASK_WARNING_MSG="" # Warning message. EX: "BTRFS filesystem was supposed to be locked, but it was already unlocked. Continuing.."
TASK_PROGRESS=0     # Use this whenever we want to send progress to the GUI in the form of whole number percentages

frzr_check_bootenv() {
    if [ -d /tmp/frzr_root ]; then
        UPGRADE=0
    else
        UPGRADE=1
    fi
}

frzr_chroot() {
    local CHROOT_PATH=$1
    local CHROOT_CMD=$2

    mount -t proc /proc proc/
    mount -t sysfs /sys sys/
    mount --rbind /dev dev/

    chroot ${CHROOT_PATH} /bin/bash <<EOF
    ${CHROOT_CMD}
EOF
}

frzr_undo_chroot() {
    local CHROOT_PATH=$1
    umount -l ${CHROOT_PATH}/proc
    umount -l ${CHROOT_PATH}/sys
    mount --make-rslave ${CHROOT_PATH}/dev
    umount -l ${CHROOT_PATH}/dev
}

frzr_status() {
    # Output frzr status tracker using the JSON format
    cat <<EOF
{
    "Signals": {
        "Task MSG": "$TASK_MSG",
        "Task Tracker": "$TASK_TRACKER",
        "Task Error": "$TASK_ERROR",
        "Task Error MSG": "$TASK_ERROR_MSG",
        "Task Warning": "$TASK_WARNING",
        "Task Warning MSG": "$TASK_WARNING_MSG",
        "Task Progress": "$TASK_PROGRESS",
    },
    "Globals": {
        "Target": "$TARGET",
        "Local Install": "$LOCAL_INSTALL",
        "Repair Install": "$REPAIR_INSTALL",
        "Show UI": "$SHOW_UI",
        "EFI Path": "$EFI_MOUNT_PATH",
        "Mount Path": "$MOUNT_PATH",
        "SUBVOL": "$SUBVOL",
        "Deploy Path": "$DEPLOY_PATH",
        "Frzr Check Update": "$FRZR_CHECK_UPDATE",
        "Frzr Params": "$FRZR_PARAMS",
        "File Name": "$FILE_NAME",
        "IMG Name": "$IMG_NAME",
        "Base URL": "$BASE_URL",
        "Repo": "$REPO",
        "Release URL": "$RELEASES_URL",
        "Expected Checksum": "$EXPECTED_CHECKSUM",
        "Actual Checksum": "$ACTUAL_CHECKSUM",
        "Channel": "$CHANNEL",
        "State Machine State": "$STATE"
    }
}
EOF
}

trap frzr_status SIGINT SIGTERM ERR

frzr_check() {
    local result=$1
    if [ $result == 0 ]; then
        value="✓"
    else
        value="✗"
    fi

    echo $value
}

write_tracker_file() {
	frzr_status >"$TRACKER_FILE_DIR/frzr.tracker"
}

# Create the tracker file before we start
write_tracker_file
# Write tracker file when frzr exits
#trap write_tracker_file SIGINT SIGTERM EXIT ERR
# Define a function to handle errors
handle_error() {
    local function_name="$1"
    local line_number="$2"
    local command="$3"

    echo "Error occurred in function '${function_name}' on line ${line_number}. Command: '${command}'"

    frzr_status

    if [ -f /tmp/frzr.lock ]; then
        rm /tmp/frzr.lock
    fi
}

# Set up trap to catch errors and call handle_error function
trap 'handle_error "${FUNCNAME[0]}" "$LINENO" "$BASH_COMMAND"' ERR

# Begin execution
if [ $EUID -ne 0 ]; then
    echo "$(basename $0) must be run as root"
    exit 1
fi

if [ $# -eq 0 ]; then
    echo "Frzr requires at least one argument. Use frzr help for usage"
    exit
fi

function=$1
arg1=$2
arg2=$3
arg3=$4

if [ $function == "help" ]; then
    echo "[Usage]
frzr deploy [Check for system updates and update the system if available]
frzr unlock (deployment) [Unlock the specified deployment, or the running one if deployment is not specified]
frzr kernel [Deploy a custom kernel]
frzr set-channel [Set the update channel stable/testing/unstable]
frzr get-channel [Get the update channel currently in use]
frzr version [Get the version of FRZR]
frzr build-initramfs [Build the initramfs for the kernel]
frzr configure-tweaks [Configure system specific quirks]
frzr bootstrap [Format and configure a drive to be used with FRZR]"
elif [ $function == "bootstrap" ]; then
    source "${BASH_SOURCE%/*}/frzr-bootstrap" "${arg1}" "${arg2}" "${arg3}" # username, disk, clean/repair install
    RESULT=$?
    exit $RESULT
elif [ $function == "deploy" ]; then
    frzr_check_bootenv
    # We don't want to pass the function parameter to __frzr-deploy
    shift
    #flock -E 255 -n /tmp/frzr.lock "frzr-deploy" "$@"
    source "${BASH_SOURCE%/*}/frzr-deploy" "$@"
    RESULT=$TASK_ERROR
    #if [ $RESULT == 255 ]; then
    #    echo "ERROR: $(basename $0) is already running"
    #fi
    exit $RESULT
elif [ $function == "unlock" ]; then
    frzr_check_bootenv
    # We don't want to pass the function parameter to __frzr-unlock
    shift

    #flock -E 255 -n /tmp/frzr.lock "frzr-deploy" "$@"
    source "${BASH_SOURCE%/*}/frzr-unlock" "$@"
    RESULT=$?

    #if [ $RESULT == 255 ]; then
    #    echo "ERROR: $(basename $0) is already running"
    #fi

    exit $RESULT
elif [ $function == "kernel" ]; then
    frzr_check_bootenv
    # We don't want to pass the function parameter to __frzr-deploy
    shift
    source "${BASH_SOURCE%/*}/__frzr-kernel"

    flock -E 255 -n /tmp/frzr.lock "kernel" "$@"
    RESULT=$?

    if [ $RESULT == 255 ]; then
        echo "ERROR: $(basename $0) is already running"
    fi

    exit $RESULT
elif [ $function == "release" ]; then
    source "${BASH_SOURCE%/*}/frzr-release" "$@"
elif [ $function == "version" ]; then
    echo "frzr-release"
    #TODO Update frzr-release logic
    #This probably should get the frzr version instead of the OS
    #source frzr-release
elif [ $function == "set-channel" ]; then
    echo "set channel"
    #TODO create frzr-channel to set target channel
    #frzr-channel $arg1
elif [ $function == "get-channel" ]; then
    echo "get-channel"
    #TODO create frzr-channel to get target channel
    #echo ${FRZR_ROOT}/source
elif [ $function == "build-initramfs" ]; then
    source frzr-initramfs
elif [ $function == "configure-tweaks" ]; then
    source frzr-tweaks
elif [ $function == "package-options" ]; then
    #User selected packages to be added to the install
    source frzr-extras
else
    echo "invalid argument"
fi

# print out the latest error in stderr (this is meant for debugging)
if [ ! -z "${TASK_ERROR_MSG}" ]; then
    echo "${TASK_ERROR_MSG}" 1>&2
fi
